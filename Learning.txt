1. Bcryptjs : Used for hashing the password that is stored inside the mongoDb.
   npm i bcryptjs 
   import bcryptjs from 'bycryptjs'
   const hashPassword = bcryptjs.hashSync(password , 10)   //10 is the salt length 
   const validPassword = bcryptjs.compareSync(password,validUser.password)

2. Controllers : A controller is a function you write to control your data.
    export const signup = function(req,res){
        //logic
    }
    This is then imported into the signup route

3. express.Router() : The express.Router() function is used to create a new router object. This function is used when you want to create a new router object in your program to handle requests. 
    const router = express.Router();
    router.post('/signup', signup)
    export default router;
 Now import the router in the index.js file by: 
    app.use('/api/auth', authRouter)

4. .env : Dotenv is a zero-dependency module that loads environment variables from a .env file into process.env
    npm i dotenv;
    keep mongoose connect string insie .env file : MONGOOS = "..."
    import dotenv from 'dotenv';
    dotenv.config();
    mongoose.connect(process.env.MONGO)

5. timestamps : In user.Model while creating userSchema we can save time of creation and time of updation in the DB by:
    const userSchema =new mongoose.Schema(
            {username: "String", password: "String",email: "String"},
            {timestamps: true}
        )

6. e.preventDefault() 
    -It is used to prevent refreshing the page when submiting the form

7. proxy: to get response from backend server we cant directly write fetch('/api/auth/signup') as it will look it in localhost:5173 ,i.e, client so we need to create a proxy by:
    - Go in vite.config folder then :-
        server: {
            proxy:{
            '/api':{
                target: 'http://localhost:3000/',
                secure: false,
            },
        },
    },

8. cookie :
    res.cookie('access_token',token,{httpOnly:true})
            .status(200)
            .json(rest);  // sending user data without the password

9. Redux tool kit
Step 1: Create a store called store.js 
    import { configureStore } from '@reduxjs/toolkit'
    export const store = configureStore({
        reducer: {
            // add all reducers here 
        },
        middleware:(getDefaultMiddleware)=> getDefaultMiddleware({
            serializableCheck: false, 
        }) 
    })
    // we add middleware here so that we will not get an error for not serializing our variables here

Step 2: Provide the redux store to react 
    import {store} from './redux/store.js';
    import { Provider } from 'react-redux'; 
    ReactDOM.createRoot(document.getElementById('root')).render(
        <Provider store={store}>
            <App />
        </Provider>,
    )

Step 3: Create a redux state slice userSlice.js
    import {createSlice} from '@reduxjs/toolkit';

    const initialState = {
        currentUser: null,
        error: null,
        loading: false,
    }
    const UserSlice = createSlice({
        name: 'user',
        initialState,
        reducers: {
            signInStart:(state) => {
                state.loading = true;
            },
            signInsuccess:(state,action) => {
                state.currentUser = action.payload;
                state.loading = false;
                state.error = null;
            },
            signInFailure:(state,action) => {
                state.error = action.payload;
                state.loading = false;
            }
        }
    });

    export const { signInFailure, signInSuccess, signInStart } = userSlice.actions;

    export default userSlice.reducer;

Step 4: Add slice to store:
    import { configureStore } from '@reduxjs/toolkit'
    import  useReducer  from './userSlice'

    export const store = configureStore({
        reducer: {
            user: useReducer
        },
        middleware:(getDefaultMiddleware)=> getDefaultMiddleware({
            serializableCheck: false,
        }) 
    })

Step 5: dispatch these function
    import {useDispatch, useSelector} from 'react-redux'
    import { signInStart,signInSuccess,signInFailure } from '../redux/userSlice';

    const { loading,error } = useSelector((state)=> state.user)
    const dispatch = useDispatch();
    
    //use like this
    dispatch(signInStart());
    dispatch(signInFailure(data.message));
